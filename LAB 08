HW 01



public class HW1 {

	public static void main(String[] args) {

		// testing by creating objects
		MyInteger a = new MyInteger(2020);
		MyInteger b = new MyInteger(2001);
		MyInteger c = new MyInteger(1999);
		MyInteger d = new MyInteger(1971);
		MyInteger e = new MyInteger(2020);

		System.out.println(a.getValue() + " is even: " + a.isEven());
		System.out.println(b.getValue() + " is odd: " + b.isOdd());
		System.out.println(c.getValue() + " is even: " + c.isEven());
		System.out.println(d.getValue() + " is odd: " + d.isOdd());
		System.out.println(e.getValue() + " is even: " + e.isEven());

		//static
		System.out.println("\n201 is odd: "+MyInteger.isOdd(201));

		//equals
		System.out.println(a.value+" is equals to "+e.value+": "+a.equals(e.value));

		//parseInt()
		char[] array = {'2','2','1'};
		System.out.println("Array to Integer: "+MyInteger.parseInt(array));
		System.out.println("Integer: "+MyInteger.parseInt("642"));
	}

}

class MyInteger {
	int value;

	// constructor
	MyInteger(int value) {
		this.value = value;
	}

	// getter method that return value
	public int getValue() {
		return value;
	}

	// check even
	public boolean isEven() {
		if (value % 2 == 0)
			return true;
		else
			return false;
	}

	// check even
	public boolean isOdd() {
		if (value % 2 != 0)
			return true;
		else
			return false;
	}

	// check prime
	public boolean isPrime() {
		for (int i = 2; i < value; i++) {
			if (i % value == 0)
				return false;
		}
		return true;
	}

	// static methods
	public static boolean isEven(int n) {
		return n % 2 == 0;
	}

	public static boolean isOdd(int n) {
		return n % 2 != 0;
	}

	public static boolean isPrime(int n) {
		for (int i = 2; i < n; i++) {
			if (i % n == 0)
				return false;
		}
		return true;
	}

	// MyInteger
	public static boolean isEven(MyInteger n) {
		return n.isEven();
	}

	public static boolean isOdd(MyInteger n) {
		return n.isOdd();
	}

	public static boolean isPrime(MyInteger n) {
		return n.isPrime();
	}

	// check equals
	public boolean equals(int n) {
		if (n == value)
			return true;
		else
			return false;
	}

	public boolean equals(MyInteger n) {
		if (n.value == this.value)
			return true;
		else
			return false;
	}

	// prseInt()
	public static int parseInt(char[] ch) {
		int add = 0;
		// for each loop
		for (char i : ch) {
			add += Character.getNumericValue(i);
		}
		return add;
	}

	public static int parseInt(String s) {
		return Integer.parseInt(s);
	}
}


HW 02


public class HW2 {

	public static void main(String[] args) {
		Queue queue = new Queue();

		// assigning values to queue
		for (int i = 0; i < 10; i++) {
			queue.enqueue(i + 1);
		}

		//printing
		System.out.println("Display:");
		int size = queue.getSize();
		for (int j = 0; j < size; j++) {
			System.out.println(queue.dequeue());
		}

	}

}

class Queue {
	int[] elements;
	int size;

	Queue() {
		elements = new int[8];
	}

	void enqueue(int v) {
		if (size >= elements.length) {
			int[] arr = new int[elements.length * 2];
			System.arraycopy(elements, 0, arr, 0, elements.length);
			elements = arr;
		}
		elements[size] = v;
		size++;
	}

	int dequeue() {

		int[] arr = new int[elements.length - 1];
		int num = elements[0];

		System.arraycopy(elements, 1, arr, 0, elements.length - 1);
		elements = arr;
		size--;
		return num;
	}

	boolean empty() {
		
		return size == 0;
	}

	int getSize() {
		
		return size;
	}

}

TASK 01



public class Task1 {

	public static void main(String[] args) {

		// objects for two fans
		Fan f1 = new Fan();
		Fan f2 = new Fan();

		// assigning speed, radius, color, set on for fan1
		f1.turnon();
		f1.setspeed(2);
		f1.setradius(20.5);
		f1.setcolor("Cyan");

		// assigning radius, color, set off for fan2
		f2.turnoff();
		f2.setradius(10.5);
		f2.setcolor("BLACK");
		
		//printing
		System.out.println(f1.toString());
		System.out.println(f2.toString());

	}
}
	class Fan {
		final int SLOW = 1;
		final int MEDIUM = 2;
		final int FAST = 3;
		private int speed;
		private boolean on;
		private double radius;
		String color;

		// no argument constructor
		Fan() {
			speed = SLOW;
			on = false;
			radius = 5;
			color = "blue";
		}

		// setter methods
		public void setspeed(int speed) {
			this.speed = speed;
		}

		public void setcolor(String color) {
			this.color = color;
		}

		public void setradius(Double radius) {
			this.radius = radius;
		}

		public void turnon() {
			on = true;
		}

		public void turnoff() {
			on = false;
		}

		// getter methods
		public boolean ison() {
			return on;
		}

		public double getradius() {
			return radius;
		}

		public String getcolor() {
			return color;
		}

		public String getspeed() {
			if (this.speed == SLOW)
				return "SLOW";
			else if (this.speed == MEDIUM)
				return "MEDIUM";
			else
				return "FAST";
		}

		// toString
		public String toString() {
			if (on == true) {
				String s = "Fan speed: " + getspeed() + "\nColor: " + color + "\nRadius: " + radius + "\n";
				return s;

			} else {
				String s = "Fan color: " + color + "\nRadius: " + radius + "\nFan is off\n";
				return s;
			}
		}

	}

TASK 02


public class Task2 {

	public static void main(String[] args) {
		
		//Time objects
		Time t1 = new Time(555550000L);
		Time t2 = new Time();
		
		//printing 1
		System.out.println(""+t1.gethour()+":"+t1.getMin()+":"+t1.getsec());
		System.out.println(""+t2.gethour()+":"+t2.getMin()+":"+t2.getsec());

		//sending a millisecond time to t2 object and print 
		t2.setTime(1000000000L); 
		System.out.println(""+t2.gethour()+":"+t2.getMin()+":"+t2.getsec());
	}
}	
	class Time{
		private int hour;
		private int min;
		private int sec;
		private long time;
		
		//no argument constructor
		Time(){
			time = System.currentTimeMillis();
		}
		
		public Time(long time) {
			this.time = time;
		}
		
		public Time(int hour, int min, int sec) {
			this.hour = hour;
			this.min  = min;
			this.sec  = sec;
		}
		
		//3 getter methods
		public int gethour() {
			int convertedHour = (int)(time/(1000*3600))%24;
			return convertedHour;
		}
		
		public int getMin() {
			int convertedMin = (int)(time/(1000*60))%60;
			return convertedMin;
		}
		
		public int getsec() {
			int convertedsec = (int)((time/1000)%60);
			return convertedsec;
		}
		
		//long elapsedTime method
		public void setTime(long elapsedTime) {
			this.time = elapsedTime;
		}
	}
